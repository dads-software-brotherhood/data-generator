package mx.infotec.dads.datagenerator;

import java.text.SimpleDateFormat;
import java.util.Random;

import mx.infotec.dads.datafactory.CurpRfcDataValues;
import mx.infotec.dads.utils.Constants;

public class DefaultCurpRfcDataValues implements CurpRfcDataValues {

	private static Random random = new Random();

	/**
	 * Los elementos de este arreglo se crean al azar, con base al formato
	 * publicado en: http://curp-gob.com/curp/ayuda/curp-elementos-del-curp/
	 * 
	 */
	private static String curp[] = { "CAHS710926HTCWYK51", "CIVW640624HMCSTY58", "QAFH841218HJCBVC08",
			"MOVB810802HMNXWW58", "DIND760519MJCKDX56", "SEHJ550125MASYDM16", "MASY660315MHGNDV33",
			"LIXB750421HNTRPS88", "PIFM791023HNLHDL17", "FOVC650515HNTJPG46", "NONH681116MOCJTY84",
			"ROQC570831HHGHJP83", "TELQ670419MHGFVH87", "NIJD780904HYNGQL74", "SESC620331MMSYNV13",
			"WIRK800715HSRYBR41", "PODN550824MCHJXN82", "YEQM670530MHGNKQ71", "JOJS620223HBSGHY34",
			"TABR550725HBCWGS05", "TIPH681010MOCBSH07", "MATC700814HDFGJJ00", "QOGR571112MTSRDS25",
			"DENP571021HOCCJV64", "JOWM631020HMCRLN64", "BIVM791220HGTMVC48", "NISD651014HGRTBG44",
			"NEBG731013HTSXMH06", "CANX670808HTCDVD45", "CEMF571027MVZPNQ45", "VASD550606HVZCPK52",
			"PEBH610205MDFBPY81", "LEDT810424MNTXMY47", "WOCH650908MCCNNR06", "DEVF700305MSRTYY40",
			"LAYD690720HTSSBJ43", "FAKP730523HDFWKV26", "LOLQ670407HMCRYQ81", "DITH740723HSRYQY36",
			"CENN620716HTSVPF08", "SAYS660316HGRYNB61", "POBF610202MOCSTV61", "YATR830720MOCQWY41",
			"MAGT570211MASVJQ13", "VOMH640411MBSKQG35", "SIVY550321MBSCFF76", "LILJ721215MOCWBN56",
			"MIVH620211MDFXSY44", "GEGY670323HBCJSP54", "NAHS830228MSPHSG42", "MERX780307HBCTKF05",
			"NOHD790212MCHDBN16", "DOXQ630115HSLPFF40", "FEFN740202HSLVSW30", "BOHF551102HJCVHJ10",
			"RALL770708HCHJMC45", "DODX761002HNTDSN71", "TAGV790801HVZMVT33", "GIWG610321MSRHMX18",
			"NOYG631106MBCDPX66", "MOWX580928HNLFBB62", "MELT640505MCLXGJ83", "CETK651128HBCCCN56",
			"VODK581012MDGWCH14", "REGH720329MASJFM01", "DOHL750429MMNMDQ27", "XOGM800130HNTNLR16",
			"FIQW790903MTCQDN43", "MEVM650405HQTMGS27", "KOMQ791216MPLQMV64", "CAKF591212MOCGBB45",
			"SOCP770127MNLKMH23", "XAWF721217HYNPXJ42", "BOFQ660512HTSDPW34", "XIQR710614MSRXGB26",
			"HAKN771229MCSRDV28", "SATB760530MCMWKX00", "NAHJ720108MTLWFJ30", "BICF820813MDGSKD14",
			"TOQT720321MQTSPK83", "BEPR610930MGRCSY18", "XIBJ660616HBCGXL70", "XITW720124HQTPNC63",
			"QECP640625MSPQPB07", "DEKR700923MCSLFQ25", "YACM740204MNTBDR77", "FOWL590305HCLVRF04",
			"VOXJ790213MNTBKR01", "JOGB841116MMSWQX88", "TADM811129HMCVMR87", "RIFH820903MSRTPC61",
			"JIKW831220HSLTYL11", "WOKP730617MBCDTJ46", "SEXL770929HQTTDH35", "CAQD750315HGTLMJ13",
			"HEGW650822HTLLWJ60", "SEHL801012HNLFMK33", "WAGW630712HTLPSX37", "HOWX620430HJCWJH11",
			"HIMF820608HGTXDK00" };

	/**
	 * Los elementos de este arreglo se crean al azar, con base al formato
	 * publicado en https://www.consisa.com.mx/paginas/como_calcular_RFC.php
	 * 
	 * para peronas físicas y morales.
	 */
	private static String rfc[] = { "VIBK710926PX5", "PANT640624GY6", "WIVT841218DJ4", "MAKY810802XL5", "QIDV760519CJ8",
			"NONQ550125JS5", "QOMY660315HH8", "NAGN750421HD7", "DOJX791023TL6", "QOBH650515BP4", "PEKB681116LS3",
			"MAMV570831WH6", "CACD670419NV4", "LEHJ780904XS4", "TOPH620331RP1", "TEDK800715WM2", "ROSV550824FX8",
			"WAGJ670530XL8", "JAKQ620223PM5", "QORM550725XM3", "QOKR681010YJ8", "SOBX700814QC6", "WOQX571112VJ2",
			"LOVY571021MQ8", "JITJ631020TL2", "LEBQ791220VC7", "KOTM651014FK4", "VIBR731013JM4", "FEWW670808DK0",
			"KOPT571027TR6", "MIMC550606WQ0", "COQG610205HM5", "FEBH810424VX0", "TOCR650908FQ7", "GODS700305XL1",
			"BOVH690720VH1", "LIVW730523GG0", "FOPD670407QF7", "SIYY740723RD5", "CESV620716TD5", "COLY660316WM8",
			"QEFR610202YP8", "XOLV830720LF6", "COQJ570211FS0", "FINP640411YY5", "GEVH550321HD3", "KOCQ721215CV1",
			"TEVF620211HS8", "MABP670323VS5", "SENX830228XC3", "TAYX780307TV7", "LIGV790212YV4", "QIMR630115HK1",
			"MATM740202LG4", "XATR551102WD2", "VOJG770708SK4", "GOHK761002LQ3", "BOWS790801KX8", "XOGT610321HL0",
			"WIKS631106TH0", "XODL580928QH3", "WOTX640505LM7", "XAKR651128PB8", "WIWC581012LP6", "VAVV720329JC2",
			"LAFD750429JK5", "KEGD800130HQ4", "GEBB790903YM8", "LAGS650405HG5", "TOSJ791216JB2", "MONQ591212RC2",
			"LOXM770127RG7", "NORD721217LL8", "LIRM660512WQ5", "LELT710614FC6", "RATG771229SH7", "FOKX760530WD4",
			"XOBX720108TQ1", "GAQH820813MD8", "DAPB720321MP1", "SECY610930CP8", "VABD660616PR7", "KADX720124PK7",
			"KOYT640625TH8", "DEJW700923WC8", "SASJ740204TW2", "XIXD590305YD4", "XAPF790213MN7", "NEWG841116PQ6",
			"NADG811129LF0", "DODX820903KM7", "YAXD831220XX6", "YEFJ730617JJ0", "POFL770929DR7", "NEYY750315KC5",
			"TORD650822RD2", "GECM801012LN7", "VOVY630712SL0", "XOJN620430FC5", "QAXM820608KC8" };

	private static String rfcMoral[] = { "JOV710926F75", "NET640624Q28", "GOM841218P13", "BAW810802P71", "KEC760519J28",
			"XAQ550125C03", "TEM660315D50", "XIX750421X52", "HAW791023S40", "DIC650515H28", "TIW681116T32",
			"QIJ570831H38", "VOC670419S53", "VAR780904L74", "DAV620331S34", "MAP800715V34", "TED550824L54",
			"YAM670530F66", "BAX620223W07", "TAT550725S04", "GOF681010Y08", "FOK700814X13", "WID571112L20",
			"CIV571021L76", "JEL631020G00", "KEW791220G27", "MED651014X21", "WIP731013N01", "VIN670808Q58",
			"HEJ571027R81", "YID550606G80", "VAJ610205Q07", "LOM810424N21", "SIJ650908M06", "FAN700305Y38",
			"CIS690720B25", "XOV730523Q66", "QIN670407J65", "MOV740723C20", "TAM620716C14", "FAS660316S14",
			"YAD610202W64", "QET830720Q43", "SES570211H54", "TEQ640411F62", "MOP550321T24", "GIV721215G14",
			"FOH620211G56", "BOQ670323X26", "XOX830228B35", "MIK780307F16", "SIV790212S82", "COJ630115R71",
			"WOP740202H28", "KAF551102J22", "SEJ770708G30", "VIN761002X60", "NOP790801G52", "BAV610321G75",
			"HAY631106W42", "VOV580928L42", "POQ640505S05", "SOQ651128C53", "JAS581012C85", "MIQ720329D41",
			"LAQ750429X65", "SOQ800130Y63", "MEF790903Y01", "GIF650405S26", "YES791216Y25", "JIL591212F20",
			"FIR770127X76", "GIC721217C12", "MIM660512R34", "WON710614P01", "LIS771229S10", "LEM760530V47",
			"FEB720108M66", "PEQ820813G71", "GAT720321D45", "YIM610930V42", "TIR660616W11", "SOJ720124G38",
			"BAW640625Q60", "TOQ700923K73", "HOX740204V35", "BEW590305P21", "DIB790213W34", "KOP841116B78",
			"KAB811129G46", "YIB820903V66", "MEK831220M03", "KEC730617D54", "DOP770929S88", "BOF750315B23",
			"NED650822P01", "FEY801012X06", "YEB630712P08", "XOT620430H34", "MIV820608Q81" };

	@Override
	public String getRandomCurp() {
		return curp[random.nextInt(curp.length)];
	}

	@Override
	public String getRandomRfc() {
		return rfc[random.nextInt(rfc.length)];
	}

	@Override
	public String getRandomRfcMoral() {
		return rfc[random.nextInt(rfcMoral.length)];
	}


	/*
	public static void main(String[] args) {
		generateData();

	}*/
	
	/**
	 * Este método, solo se utiliza para generar el stack de curp y rfc el
	 * resultado de la primera ejecución se muestra arriba para cada variable.
	 * Formato curp C V C C N N N N N N S E E C C C N N 
	 * Formato rfc persona física C V C C N N N N N N C C N 
	 * Formato rfc persona moral C V C N N N N N N C N N 
	 * 
	 * C = consonant 
	 * V = vowel 
	 * S = sex 
	 * E = short entity
	 */
	private void generateData() {
		boolean isCurp = true;
		boolean isMoral = false;
		DataFactory dataFactory = new DataFactory();
		SimpleDateFormat dateFormat = new SimpleDateFormat("yyMMdd");
		int consonantsLenght = Constants.CONSONANTS.length - 1;
		int vowelsLength = Constants.VOWELS.length - 1;
		int numbersLength = Constants.NUMBERS.length - 1;
		
		try {
			for (int i = 0; i < 100; i++) {
				StringBuilder result = new StringBuilder();
				result.append("\"").append(Constants.CONSONANTS[random.nextInt(consonantsLenght)])
						.append(Constants.VOWELS[random.nextInt(vowelsLength)])
						.append(Constants.CONSONANTS[random.nextInt(consonantsLenght)]);
				if (!isMoral) {
					result.append(Constants.CONSONANTS[random.nextInt(consonantsLenght)]);
				}
				result.append(dateFormat.format(dataFactory.getBirthDate()));
				if (isCurp) {
					result.append(Constants.SEX[random.nextInt(2)]).append(dataFactory.getAbreviaturaEntidad(0))
							.append(Constants.CONSONANTS[random.nextInt(consonantsLenght)])
							.append(Constants.CONSONANTS[random.nextInt(consonantsLenght)])
							.append(Constants.CONSONANTS[random.nextInt(consonantsLenght)])
							.append(Constants.CONSONANTS[random.nextInt(numbersLength)])
							.append(Constants.NUMBERS[random.nextInt(numbersLength)]);
				} else {
					result.append(Constants.CONSONANTS[random.nextInt(consonantsLenght)]);
					if (!isMoral) {
						result.append(Constants.CONSONANTS[random.nextInt(consonantsLenght)])
								.append(Constants.NUMBERS[random.nextInt(numbersLength)]);
					} else {
						result.append(Constants.NUMBERS[random.nextInt(numbersLength)])
								.append(Constants.NUMBERS[random.nextInt(numbersLength)]);
					}

				}

				result.append("\"");
				if (i != 99) {
					result.append(",");
				}
				System.out.println(result);
			}

		} catch (Exception e) {
			e.printStackTrace();
		}
	}
}
